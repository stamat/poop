#!/usr/bin/env node

/**
 * This script is used to publish a new version of the package.
 * It can automatically increment the patch version if no version is specified in the package.json and commit the changes.
 * It can also automatically tag and push the tags.
 * Using GH CLI, it can also create a release.
 *
 * Fucking awesome, right?
 *
 * With love, @stamat
 */
const readline = require('readline')
const { exec } = require('child_process')
const fs = require('fs')
const path = require('path')
let version = process.argv[2]
const packageJson = require(path.join(process.cwd(), './package.json'))

function question(prompt) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  return new Promise((resolve) => {
    rl.question(prompt, (answer) => {
      rl.close()
      resolve(answer)
    })
  })
}

function isValidVersion(version) {
  return /^(\d+)\.(\d+)\.(\d+)(?:-([\w-]+(?:\.[\w-]+)*))?(?:\+([\w-]+(?:\.[\w-]+)*))?$/.test(version)
}

function incrementPatchVersion(version) {
  const parts = version.split('.')
  const patch = parseInt(parts[2]) + 1
  return `${parts[0]}.${parts[1]}.${patch}`
}

async function run(cmd, exitOnError = true) {
  console.log(cmd)
  try {
    const out = await exec(cmd)
    console.log(out.toString())
  } catch (e) {
    if (exitOnError) process.exit(1)
  }
}

async function publish(version) {
  packageJson.version = version
  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2))

  run('git add package.json')
  run(`git commit -m "Bump version to ${version}"`)

  if (fs.existsSync(path.join(process.cwd(), 'script/build'))) {
    run('script/build')
    run('git add .')
    run(`git commit -m "Build version ${version}"`)
  }

  run(`git tag v${version}`)
  run('git push')
  run('git push --tags')

  const publish = await question('Do you want to publish the package? (y/n) ')
  if (publish === 'y') {
    let notesArg = ''
    const notes = await question('Enter notes for the release (optional): ')
    if (notes.trim() !== '') {
      notesArg = ` --notes "${notes}"`
    }
    run(`gh release create v${version} --title "v${version}"${notesArg} --generate-notes --latest`)
    run('npm publish')
  } else {
    run('npm publish')
  }
}

async function init() {
  if (!packageJson.version) {
    console.log('No version found in package.json')
    process.exit(1)
  }

  if (version && !isValidVersion(version)) {
    console.log('Invalid version: ', version)
    console.log('Current version: ', packageJson.version)
    process.exit(1)
  }

  if (version && packageJson.version === version) {
    console.log('Version is already ', version)
    process.exit(1)
  }

  if (!version) {
    console.log('Current version: ', packageJson.version)
    version = incrementPatchVersion(packageJson.version)
    const answer = await question(`Do you want to increment the version to ${version}? (y/n) `)
    if (answer === 'y') {
      publish(version)
    } else {
      console.log('Aborted')
      process.exit(0)
    }
  } else {
    publish(version)
  }
}
init()
